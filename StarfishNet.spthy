/*
StarfishNet IoT network protocol.
Authentication sequence.

Author: Justin King-Lacroix
Date:   January 2015
*/

theory StarfishNet
begin

builtins: hashing, signing, diffie-hellman
/* MAC is for modelling the integrity-protection we get on encrypted, unsigned packets.
 * We don't actually model said encryption because none of the information we're modelling
 * is actually encrypted.
 */
functions: MAC/2

//Base PKI rules
rule Register_key:
    [ Fr(~ltk) ]
  -->
    [ !Ltk($A, ~ltk), !Pk($A, pk(~ltk)), Out(pk(~ltk)) ]

//Protocol description rules

/* 1. Associate_Request  (A sends DHE public key.)
Context: Initiator

Casper:
<pdhI := PDH(x)>
1.  A -> B : {pdhI}{SK(A)}
[A != B]
*/
rule Associate_Request:
    let pdhI = 'g' ^ ~sdhI
    in
    [ !Ltk($I, ltkI) //initiator's signing key
    , !Pk($R, pk(ltkR)) //responder's public key
    , Fr(~sdhI) //generate initiator's DHE keys
    ]
  -->
    [ Associate_Request($I, $R, ~sdhI) //say A_Req has occurred
    , Out(<pdhI, sign{pdhI}ltkI>) //tx A_Req
    , !DHE($I, $R, ~sdhI) //and log an event that we now have a DHE private key
    ]


/* 2. Associate_Reply    (B sends DHE public key, and challenge1 == H(H(k)).)
Context: Responder

Casper:

(Morally:
<pdhR := PDH(y); k := DH(pdhI, SDH(y)); A::k := DH(pdhR, SDH(x))>
2. B -> A {pdhR, SHA1(SHA1(k))}{SK(B)})
)

-- 2a. B sends DHE public key.
<pdhR := PDH(y)>
2a. B -> A : {pdhR}{SK(B)}

-- 2b. Dummy to give A an assignment clause, in which the DH maths is done.
<k := DH(pdhR, SDH(x))>
2b. A ->   : A

-- 2c. B sends challenge1.
<k := DH(pdhI, SDH(y))>
2c. B -> A : {SHA1(SHA1(k))}{SK(B)}
*/
rule Associate_Reply:
    let pdhR = 'g' ^ ~sdhR
        k = h(pdhI ^ ~sdhR) //generate session key
        chal1 = h(h(k)) //generate chal1
    in
    [ !Ltk($R, ltkR) //responder's signing key
    , !Pk($I, pk(ltkI)) //initiator's public key
    , Fr(~sdhR) //generate responder's DHE keys
    , In(<pdhI, sign{pdhI}ltkI>) //rx A_Req
    ]
  -->
    [ Associate_Reply($I, $R, k) //say A_Rep has occurred
    , Out(<pdhR, chal1, sign{<pdhR, chal1>}ltkR>) //tx A_Rep
    , !DHE($R, $I, ~sdhR) //and log an event that we now have a DHE private key
    ]


/* 3. Associate_Finalise (A sends challenge2 == H(k).)
Context: Initiator

Casper:
3.  A -> B : SHA1(k)
*/
rule Associate_Finalise:
    let k = h(pdhR ^ sdhI)
        chal1 = h(h(k)) //check chal1
        chal2 = h(k)    //generate chal2
    in
    [ !Pk($R, pk(ltkR)) //responder's public key
    , Associate_Request($I, $R, sdhI) //ensure A_Req has occurred
    , In(<pdhR, chal1, sign{<pdhR, chal1>}ltkR>) //rx A_Rep
    ]
  --[ SessionKeyI($I, $R, k) //I now thinks that a session key has been established
    ]->
    [ Out(<chal2, MAC(chal2, k)>) //tx A_Fin
    ]

/* Final rule for reception of A_Fin:
Context: Responder
*/
rule Associate_Finalise_Recv:
    let chal2 = h(k) //check chal2
    in
    [ Associate_Reply($I, $R, k) //ensure A_Rep has occurred
    , In(<chal2, MAC(chal2, k)>) //rx A_Req
    ]
  --[ SessionKeyR($I, $R, k) //R now thinks that a session key has been established
    ]->
    [ !SessionKey($I, $R, k) //assert that session key has been established
    ]


//Attack rules

rule Ltk_Reveal:
    [ !Ltk($A, ltkA) ]
  --[ LtkReveal($A) ]->
    [ Out(ltkA) ]

rule Session_Key_Reveal:
    [ !SessionKey($A, $B, k) ]
  --[ SessionKeyReveal($A, $B) ]->
    [ Out(k) ]

rule DHE_Reveal:
    [ !DHE($A, $B, dhe) ]
  --[ DHEReveal($A, $B) ]->
    [ Out(dhe) ]

//Security lemmas

lemma Key_Agreement: "
    All I R sessKey #i.
        //If R thinks it's established a session key with I...
        SessionKeyR(I, R, sessKey) @ i &

        //... and I and R have neither lost their DHE private keys, nor learned anyone else's...
        not (Ex A B #r. DHEReveal(A, B) @ r) &

        //... and they have neither lost their signing keys, nor learned someone else's...
        not (Ex E #e. LtkReveal(E) @ e)

        //... then...
        ==>

        //... I thinks it's established the same session key with R.
        (Ex #r. SessionKeyI(I, R, sessKey) @ r)
"

/* Key agreement establishes that if there's a SessionKeyR event, then there's
 * also a matching SessionKeyI event, which means I can just reason about
 * SessionKeyR events from here on in.
 * That also means that !SessionKey events mean what they're supposed to mean.
 * In other words, a SessionKeyR event now means "a shared secret has been established".
 */

lemma Key_Secrecy: "
    All I R sessKey #i.
        //If a session key has been established...
        SessionKeyR(I, R, sessKey) @ i &

        //... and I and R haven't lost their signing keys...
        not
            ( (Ex #r. LtkReveal(I) @ r)
            | (Ex #r. LtkReveal(R) @ r)
            ) &

        //... and they have neither lost their DHE private keys, nor learned anyone else's...
        not (Ex A B #r. DHEReveal(A, B) @ r) &

        //... and the session key itself hasn't been revealed...
        not (Ex #r. SessionKeyReveal(I, R) @ r)

        //... then...
        ==>

        //... the attacker doesn't know the session key.
        not (Ex #k. K(sessKey) @ k)
"

lemma Perfect_Forward_Secrecy: "
    All I R sessKey #i #k.
        //If a session key has been established...
        SessionKeyR(I, R, sessKey) @ i &

        //... and the attacker knows it...
        K(sessKey) @ k &

        //... and neither I nor R is stealing someone else's keys...
        not (Ex A #r. not (A = I) & not (A = R) & LtkReveal(A) @ r) &
        not (Ex A #r. not (A = R) & DHEReveal(A, I) @ r) &
        not (Ex A #r. not (A = I) & DHEReveal(A, R) @ r) &
        not (Ex A #r. not (A = R) & DHEReveal(I, A) @ r) &
        not (Ex A #r. not (A = I) & DHEReveal(R, A) @ r)

        //... then...
        ==>

        //... either it's been explicitly revealed...
        (Ex #r. SessionKeyReveal(I, R) @ r) |

        //... or one of the nodes has leaked its DHE private key...
        (Ex #r. DHEReveal(I, R) @ r) |
        (Ex #r. DHEReveal(R, I) @ r) |

        //... or one of the nodes' signing keys was revealed,
        // AND this reveal happened *before* establishment of the
        // session key.
        (Ex #r. LtkReveal(I) @ r & r < i) |
        (Ex #r. LtkReveal(R) @ r & r < i)
"

end
